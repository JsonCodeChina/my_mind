#!/usr/bin/env python3
"""
邮件发送工具

功能：
1. 读取 Markdown 报告并转换为 HTML
2. 发送邮件到配置的收件人
3. 支持 TLS/SSL 加密
4. 支持附件

使用：
    python email_sender.py --report cc/2025-10-28/index.md --type ccnews
    python email_sender.py --report ainews/2025-10-28/index.md --type ainews
"""

import argparse
import logging
import os
import smtplib
import sys
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path

try:
    import yaml
    import markdown
except ImportError as e:
    print(f"错误: 缺少依赖库 - {e}")
    print("请运行: pip install pyyaml markdown")
    sys.exit(1)

# ============================================================================
# 日志配置
# ============================================================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)


# ============================================================================
# 配置加载
# ============================================================================

def load_config(config_path: str = None) -> dict:
    """加载配置文件"""
    if config_path is None:
        script_dir = Path(__file__).parent
        config_path = script_dir / "config.yaml"

    with open(config_path, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


# ============================================================================
# Markdown 转 HTML
# ============================================================================

def markdown_to_html(md_content: str, title: str = "AI Report") -> str:
    """将 Markdown 转换为美化的 HTML"""

    # 转换 Markdown
    html_body = markdown.markdown(
        md_content,
        extensions=['extra', 'codehilite', 'tables', 'fenced_code']
    )

    # 添加样式
    html_template = f"""
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: #24292e;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f6f8fa;
        }}
        .container {{
            background-color: white;
            padding: 40px;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.12);
        }}
        h1 {{
            color: #1a73e8;
            border-bottom: 2px solid #1a73e8;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #2c5aa0;
            margin-top: 30px;
            border-left: 4px solid #1a73e8;
            padding-left: 15px;
        }}
        h3 {{
            color: #444;
            margin-top: 20px;
        }}
        code {{
            background-color: #f6f8fa;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 85%;
        }}
        pre {{
            background-color: #f6f8fa;
            padding: 16px;
            border-radius: 6px;
            overflow-x: auto;
        }}
        blockquote {{
            border-left: 4px solid #dfe2e5;
            padding-left: 16px;
            color: #6a737d;
            margin: 16px 0;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin: 20px 0;
        }}
        th, td {{
            border: 1px solid #dfe2e5;
            padding: 12px;
            text-align: left;
        }}
        th {{
            background-color: #f6f8fa;
            font-weight: 600;
        }}
        a {{
            color: #1a73e8;
            text-decoration: none;
        }}
        a:hover {{
            text-decoration: underline;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e1e4e8;
            color: #6a737d;
            font-size: 14px;
            text-align: center;
        }}
        .emoji {{
            font-size: 1.2em;
        }}
        hr {{
            border: none;
            border-top: 1px solid #e1e4e8;
            margin: 24px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        {html_body}
        <div class="footer">
            <p>📊 Generated by Mind AI Tracking System</p>
            <p>Powered by Claude Code | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
    </div>
</body>
</html>
"""
    return html_template


# ============================================================================
# 邮件发送
# ============================================================================

class EmailSender:
    """邮件发送器"""

    def __init__(self, config: dict):
        self.config = config['email']
        self.smtp_config = self.config['smtp']
        self.sender_config = self.config['sender']

        # 从环境变量读取密码（优先级高于配置文件）
        self.password = os.getenv('MIND_EMAIL_PASSWORD', self.sender_config.get('password', ''))

    def send_report(self, report_path: str, report_type: str = "ccnews") -> bool:
        """发送报告邮件"""

        if not self.config.get('enabled', False):
            logger.warning("邮件推送未启用，请在 config.yaml 中设置 email.enabled: true")
            return False

        if not self.password:
            logger.error("未设置邮箱密码，请配置环境变量 MIND_EMAIL_PASSWORD 或在 config.yaml 中设置")
            return False

        # 读取报告内容
        try:
            with open(report_path, 'r', encoding='utf-8') as f:
                md_content = f.read()
        except FileNotFoundError:
            logger.error(f"报告文件不存在: {report_path}")
            return False

        # 提取标题
        first_line = md_content.split('\n')[0]
        title = first_line.replace('#', '').strip() if first_line.startswith('#') else "AI Report"

        # 构建邮件主题
        subject_prefix = self.config['content']['subject_prefix']
        date_str = datetime.now().strftime('%Y-%m-%d')
        report_name = "Claude Code 日报" if report_type == "ccnews" else "AI 全景动态"
        subject = f"{subject_prefix} {report_name} - {date_str}"

        # 转换为 HTML
        if self.config['content']['format'] == 'html':
            html_content = markdown_to_html(md_content, title)
            body = html_content
            subtype = 'html'
        else:
            body = md_content
            subtype = 'plain'

        # 创建邮件
        msg = MIMEMultipart()
        msg['From'] = f"{self.sender_config['name']} <{self.sender_config['email']}>"
        msg['To'] = ', '.join(self.config['recipients'])
        msg['Subject'] = subject

        # 添加正文
        msg.attach(MIMEText(body, subtype, 'utf-8'))

        # 添加 Markdown 附件（如果配置了）
        if self.config['content'].get('attach_markdown', False):
            attachment = MIMEBase('application', 'octet-stream')
            attachment.set_payload(md_content.encode('utf-8'))
            encoders.encode_base64(attachment)
            filename = f"{report_type}_{date_str}.md"
            attachment.add_header('Content-Disposition', f'attachment; filename={filename}')
            msg.attach(attachment)

        # 发送邮件
        try:
            logger.info(f"正在连接 SMTP 服务器: {self.smtp_config['host']}:{self.smtp_config['port']}")

            if self.smtp_config.get('use_ssl', False):
                server = smtplib.SMTP_SSL(
                    self.smtp_config['host'],
                    self.smtp_config['port'],
                    timeout=30
                )
            else:
                server = smtplib.SMTP(
                    self.smtp_config['host'],
                    self.smtp_config['port'],
                    timeout=30
                )
                if self.smtp_config.get('use_tls', True):
                    server.starttls()

            logger.info("正在登录...")
            server.login(self.sender_config['email'], self.password)

            logger.info(f"正在发送邮件到: {', '.join(self.config['recipients'])}")
            server.send_message(msg)
            server.quit()

            logger.info(f"✓ 邮件发送成功！主题: {subject}")
            return True

        except smtplib.SMTPAuthenticationError:
            logger.error("SMTP 认证失败，请检查邮箱地址和密码")
            return False
        except smtplib.SMTPException as e:
            logger.error(f"SMTP 错误: {e}")
            return False
        except Exception as e:
            logger.error(f"发送邮件失败: {e}")
            return False


# ============================================================================
# 主函数
# ============================================================================

def main():
    parser = argparse.ArgumentParser(description='发送 Mind AI 报告到邮箱')
    parser.add_argument('--report', required=True, help='报告文件路径（如 cc/2025-10-28/index.md）')
    parser.add_argument('--type', choices=['ccnews', 'ainews'], default='ccnews',
                        help='报告类型')
    parser.add_argument('--config', help='配置文件路径（默认: .shared/config.yaml）')

    args = parser.parse_args()

    logger.info("=" * 60)
    logger.info("Mind AI Report - 邮件发送工具")
    logger.info("=" * 60)

    # 加载配置
    try:
        config = load_config(args.config)
    except FileNotFoundError:
        logger.error("配置文件不存在，请检查 .shared/config.yaml")
        return 1
    except yaml.YAMLError as e:
        logger.error(f"配置文件解析错误: {e}")
        return 1

    # 发送邮件
    sender = EmailSender(config)
    success = sender.send_report(args.report, args.type)

    logger.info("=" * 60)
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())
